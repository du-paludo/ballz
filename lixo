 if (collide(ball->x, ball->y, ball->x+BALL_SIZE, ball->y+BALL_SIZE, board[i][j]->x, board[i][j]->y, board[i][j]->x+SQUARE_SIZE, board[i][j]->y+SQUARE_SIZE))
                {
                    if ((ball->x+BALL_SIZE < board[i][j]->x) && (ball->y+BALL_SIZE > board[i][j]->y) && (ball->y < board[i][j]->y+SQUARE_SIZE))
                    {
                        ball->x = board[i][j]->x-BALL_SIZE;
                        ball->dx *= -1;
                    }
                    if ((ball->x < board[i][j]->x+SQUARE_SIZE) && (ball->y+BALL_SIZE > board[i][j]->y) && (ball->y < board[i][j]->y+SQUARE_SIZE))
                    {
                        ball->x = board[i][j]->x+SQUARE_SIZE;
                        ball->dx *= -1;
                    }
                    if ((ball->y+BALL_SIZE > board[i][j]->y) && (ball->x+BALL_SIZE > board[i][j]->x) && (ball->x < board[i][j]->x+SQUARE_SIZE))
                    {
                        ball->y = board[i][j]->y-BALL_SIZE;
                        ball->dy *= -1;
                    }
                    if ((ball->y < board[i][j]->y+SQUARE_SIZE) && (ball->x+BALL_SIZE > board[i][j]->x) && (ball->x < board[i][j]->x+SQUARE_SIZE))
                    {
                        ball->y = board[i][j]->y+SQUARE_SIZE;
                        ball->dy *= -1;
                    } 
                }
                /* if (aux == 1)
                    ball->dx *= -1;
                else if (aux == 2)
                    ball->dy *= -1; */
                /* if (collide_x(ball->x, ball->x+BALL_SIZE, board[i][j]->x, board[i][j]->x+SQUARE_SIZE))
                    ball->dx *= -1;
                if (collide_y(ball->y, ball->y+BALL_SIZE, board[i][j]->y, board[i][j]->y+SQUARE_SIZE))
                    ball->dy *= -1;*/


/* {
                    if ((ball->x+BALL_SIZE > board[i][j]->x) && (ball->y+BALL_SIZE > board[i][j]->y) && (ball->y < board[i][j]->y+SQUARE_SIZE))
                    {
                        ball->x -= ball->dx;
                        ball->dx *= -1;
                    }
                    if ((ball->x < board[i][j]->x+SQUARE_SIZE) && (ball->y+BALL_SIZE > board[i][j]->y) && (ball->y < board[i][j]->y+SQUARE_SIZE))
                    {
                        ball->x -= ball->dx;
                        ball->dx *= -1;
                    }
                    if ((ball->y+BALL_SIZE > board[i][j]->y) && (ball->x+BALL_SIZE > board[i][j]->x) && (ball->x < board[i][j]->x+SQUARE_SIZE))
                    {
                        ball->y -= ball->dy; 
                        ball->dy *= -1;
                    }
                    else if ((ball->y < board[i][j]->y+SQUARE_SIZE) && (ball->x+BALL_SIZE > board[i][j]->x) && (ball->x < board[i][j]->x+SQUARE_SIZE))
                    {
                        ball->y -= ball->dy;
                        ball->dy *= -1;
                    }
                    board[i][j]->lives--;
                    return true;
                } */






/* for (int i = 0; i < DISP_H/SQUARE_SIZE; i++)
        for (int j = 0; j < DISP_W/SQUARE_SIZE; j++)
            if (board[i][j]->lives > 0)
            {
                if ((ball->x + ball->dx + BALL_SIZE > board[i][j]->x) && (ball->y+BALL_SIZE > board[i][j]->y) && (ball->y < board[i][j]->y+SQUARE_SIZE))
                    ball->dx *= -1;
                else if ((ball->x + ball->dx < board[i][j]->x+SQUARE_SIZE) && (ball->y+BALL_SIZE > board[i][j]->y) && (ball->y < board[i][j]->y+SQUARE_SIZE))
                    ball->dx *= -1;
            } */



/* int collide (int ax1, int ay1, int ax2, int ay2, int bx1, int by1, int bx2, int by2)
{
    int dx = (ax1+(ax2-ax1)/2)-(bx1+(bx2-bx1)/2);
    int dy = (ay1+(ay2-ay1)/2)-(by1+(by2-by1)/2);
    int width =((ax2-ax1)+(bx2-bx1))/2;
    int height =((ay2-ay1)+(by2-by1))/2;
    int crossWidth = width*dy;
    int crossHeight = height*dx;
    int collision = 0;
    if(abs(dx) <= width && abs(dy) <= height)
    {
        if (crossWidth > crossHeight)
            collision = (crossWidth > (-crossHeight)) ? 1 : 2;
        else
            collision = (crossWidth > -(crossHeight)) ? 3 : 4;
    }
    return collision;
} */

/* bool collide(int ax1, int ay1, int ax2, int ay2, int bx1, int by1, int bx2, int by2)
{
    if ((ax1 > bx2) || (ax2 < bx1) || (ay1 > by2) || (ay2 < by1))
        return false;
    return true;
} */



bool collide_x(int ax1, int ax2, int bx1, int bx2)
{
    if ((ax1 > bx2) || (ax2 < bx1))
        return false;
    return true;
}

bool collide_y(int ay1, int ay2, int by1, int by2)
{
    if ((ay1 > by2) || (ay2 < by1))
        return false;
    return true;
}


bool collide_x(int ax1, int ax2, int bx1, int bx2);

bool collide_y(int ay1, int ay2, int by1, int by2);

// int collide(int ax1, int ay1, int ax2, int ay2, int bx1, int by1, int bx2, int by2);



int collide (ball_t* ball, square_t* square)
{
    // Centro x da bola menos o centro x do quadrado 
    float dx = ((ball->x) + BALL_SIZE/2) - ((square->x) + SQUARE_SIZE/2);

    // Centro y da bola menos o centro y do quadrado
    float dy = ((ball->y) + BALL_SIZE/2) - ((square->y) + SQUARE_SIZE/2);

    // Largura/altura da bola e do quadrado dividido por dois
    float size = ((BALL_SIZE)+(SQUARE_SIZE))/2;

    float crosswidth = size*dy;
    float crossheight = size*dx;

    // Caso não houve colisão
    int collision = 0;

    if ((abs(dx) <= size) && (abs(dy) <= size))
    {
        if (crosswidth > crossheight)
            collision = (crosswidth > (-crossheight)) ? 1 : 2;
        else
            collision = (crosswidth > -(crossheight)) ? 3 : 4;
    }
    return collision;
}

bool ball_square_collide(ball_t* ball, square_t* square)
{
    float testx = ball->x;
    float testy = ball->y;

    if (ball->x < square->x)
        testx = square->x;
    else if (ball->x > square->x + SQUARE_SIZE)
        testx = square->x + SQUARE_SIZE;

    if (ball->y < square->y)
        testy = square->y;
    else if (ball->y > square->y + SQUARE_SIZE)
        testy = square->y + SQUARE_SIZE;

    float distx = ball->x - testx;
    float disty = ball->y - testy;

    float dist = sqrt(distx*distx + disty*disty);

    if (dist <= BALL_SIZE/2)
    {
        if ((ball->x < square->x) || (ball->x > square->x + SQUARE_SIZE))
        {
            ball->dx *= -1;
        }
        else if ((ball->y < square->y) || (ball->y > square->y + SQUARE_SIZE))
        {
            ball->dy *= -1;
        }
        return true;
    }
    return false;
}